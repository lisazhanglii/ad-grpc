# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import update_monitor_pb2 as update__monitor__pb2


class UpdateMonitorServicerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MonitorUpdates = channel.stream_stream(
                '/UpdateMonitorServicer/MonitorUpdates',
                request_serializer=update__monitor__pb2.UpdateRequest.SerializeToString,
                response_deserializer=update__monitor__pb2.UpdateResponse.FromString,
                )


class UpdateMonitorServicerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MonitorUpdates(self, request_iterator, context):
        """Define an RPC method for streaming updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UpdateMonitorServicerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MonitorUpdates': grpc.stream_stream_rpc_method_handler(
                    servicer.MonitorUpdates,
                    request_deserializer=update__monitor__pb2.UpdateRequest.FromString,
                    response_serializer=update__monitor__pb2.UpdateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UpdateMonitorServicer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UpdateMonitorServicer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MonitorUpdates(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/UpdateMonitorServicer/MonitorUpdates',
            update__monitor__pb2.UpdateRequest.SerializeToString,
            update__monitor__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
